df = do.call('cbind', t[[1]])
df$urls[1]
df$urls\
df$urls
class(df)
df = data.frame(do.call('cbind', t[[1]]))
head(df)
df$urls[1]
class(df$urls[1])
str(df)
head(df[,1:3])
head(df[,1:4])
head(df[,1:5])
View(df)
View(ft)
View(ft)
View(df)
head(df[,1:5])
model = 'GFDL-ESM2M'
scenario = 'historical'
realization = 'r1i1p1'
variable = 'pr'
which(df[,2] == model & df[,3] == scenario & df[,4] == realization & df[,5] == variable)
rowid = which(df[,2] == model & df[,3] == scenario & df[,4] == realization & df[,5] == variable)
rowid
file_list = df[rowid,6]
file_list
variable = 'tasmin'
rowid = which(df[,2] == model & df[,3] == scenario & df[,4] == realization & df[,5] == variable)
rowid
file_list = df[rowid,6]
file_split = lapply(file_list, split = '/')
file_split = lapply(file_list, FUN = strsplit, split = '/')
file_split = lapply(file_list, FUN = 'strsplit', split = '/')
file_split
file_here = file_split[[1]][length(file_split[[1]])]
file_here
file_here = file_split[[1]][length(file_split[[1]])]
file_here
file_split[[1]]
file_here = file_split[[1]][1][length(file_split[[1]][1])]
file_split
file_here
file_split[[1]][1][16]
file_split[[1]][[1]][16]
file_here = file_split[[1]][[1]][length(file_split[[1]][[1]])]
file_here
ExtractSubset
do_subset_dflt
file_split
lapply(file_split, `[[`, 16)
lapply(file_split, '[[', 1)
length(file_split[[1]][[1]])
lapply(lapply[[1]], '[[', length(file_split[[1]][[1]]))
lapply(file_list[[1]], '[[', length(file_split[[1]][[1]]))
lapply(file_split[[1]], '[[', length(file_split[[1]][[1]]))
file_split = lapply(file_list, FUN = 'strsplit', split = '/')
file_here = lapply(file_split[[1]], '[[', length(file_split[[1]][[1]]))
file_here
file_list
file_loc
file_here
file_list
download.file(url = file_list, destfile = paste(save_loc, file_here, sep = '/'))
lapply(file_list, FUN = 'download.file', destfile = paste(save_loc, file_here, sep = '/'))
file_list[2]
file_list[1]
unlist(file_list)
class(file_list)
file_here = unlist(file_here)
file_here
class(file_here)
fo;e_list
file_list
class(file_list)
str(file_LIST)
str(file_list)
file_list = df[rowid,6]
file_list = unlist(file_list)
file_split = lapply(file_list, FUN = 'strsplit', split = '/')
file_here = lapply(file_split[[1]], '[[', length(file_split[[1]][[1]]))
str(file_here)
file_here
file_split = lapply(file_list, FUN = 'strsplit', split = '/')
file_here = lapply(file_split[[1]], '[[', length(file_split[[1]][[1]]))
file_here
file_list = df[rowid,6]
file_split = lapply(file_list, FUN = 'strsplit', split = '/')
file_here = lapply(file_split[[1]], '[[', length(file_split[[1]][[1]]))
file_here
rd = readLines('C:/Users/Andy/Desktop/auto_down/test.json')
t = fromJSON(rd)
df = data.frame(do.call('cbind', t[[1]]))
# search the df for
model = 'GFDL-ESM2M'
scenario = 'historical'
realization = 'r1i1p1'
variable = 'tasmin'
rowid = which(df[,2] == model & df[,3] == scenario & df[,4] == realization & df[,5] == variable)
file_list = df[rowid,6]
file_split = lapply(file_list, FUN = 'strsplit', split = '/')
file_here = lapply(file_split[[1]], '[[', length(file_split[[1]][[1]]))
file_here
str(file_here)
save_loc = 'C:/Users/Andy/Desktop/auto_down/data'
lapply(file_list, FUN = 'download.file', destfile = paste(save_loc, file_here, sep = '/'))
file_list
file_list = unlist(file_list)
file_list
lapply(file_list, FUN = 'download.file', destfile = paste(save_loc, file_here, sep = '/'))
download
download.nc
file_here
file_list
file_here[2]
file_here[3]
file_here[4]
file_here[6]
file_here[7]
file_list[1]
file_list[2]
unlist(file_here)
file_here = unlist(file_here)
file_here
locs = mapply(c, file_list, file_here, SIMPLIFY=FALSE)
locs
locs[[1]][1]
locs[[1]][2]
locs = mapply(file_list, file_here, SIMPLIFY=FALSE)
locs = mapply(c, file_list, file_here, SIMPLIFY=FALSE)
download.nc = function(locs, save_loc){
download.file(url = locs[1], destfile = paste(save_loc, locs[2], sep = '/'))
}
save_loc = 'C:/Users/Andy/Desktop/auto_down/data'
lapply(locs, FUN = 'download.nc', destfile = paste(save_loc, file_here, sep = '/'))
lapply(locs, FUN = 'download.nc', save_loc = save_loc)
x1 <- runif(1, 5.0, 7.5)
x1
x1 <- runif(1, 100000000, 900000000)
x1
x1 <- runif(1, 100000000, 900000000)
x1
tmp =  paste(runif(1, 100000000, 900000000), '_tmp_.json'
tmp = paste(runif(1, 100000000, 900000000), '_tmp_.json')
tmp
tmp = paste(runif(1, 100000000, 900000000), '_tmp_.json', sep = '')
tmp
runif(1, 100000000, 900000000)
runif(1, 100000000, 900000000)
runif(1, 100000000, 900000000)
runif(1, 100000000, 900000000)
tmp = paste(digits(runif(1, 100000000, 900000000),0), '_tmp_.json', sep = '')
tmp = paste(round(runif(1, 100000000, 900000000)), '_tmp_.json', sep = '')
tmp
tmp = paste(round(runif(1, 100000000, 900000000)), '_tmp_.json', sep = '')
tmp
delete
file.remove
load_epsg_catalog = function(){
tmp = paste(round(runif(1, 100000000, 900000000)), '_tmp_.json', sep = '')
dest = paste(getwd(), tmp, sep = '/')
download.file(url = 'http://zachary.bse.vt.edu/static/epsg_catalog.json', destfile = dest)
rd = readLines(dest)
t = fromJSON(rd)
epsg_catalog = data.frame(do.call('cbind', t[[1]]))
file.remove(dest)
return(epsg_catalog)
}
load_epsg_catalog()
data
load
load_epsg_catalog = function(){
tmp = paste(round(runif(1, 100000000, 900000000)), '_tmp_.json', sep = '')
dest = paste(getwd(), tmp, sep = '/')
download.file(url = 'http://zachary.bse.vt.edu/static/epsg_catalog.json', destfile = dest)
rd = readLines(dest)
t = fromJSON(rd)
epsg_catalog = data.frame(do.call('cbind', t[[1]]))
file.remove(dest)
load(epsg_catalog)
}
load_epsg_catalog()
epsg_catalog = load_epsg_catalog()
dest
tmp = paste(round(runif(1, 100000000, 900000000)), '_tmp_.json', sep = '')
dest = paste(getwd(), tmp, sep = '/')
download.file(url = 'http://zachary.bse.vt.edu/static/epsg_catalog.json', destfile = dest)
rd = readLines(dest)
t = fromJSON(rd)
epsg_catalog = data.frame(do.call('cbind', t[[1]]))
file.remove(dest)
return(epsg_catalog)
load_epsg_catalog = function(){
tmp = paste(round(runif(1, 100000000, 900000000)), '_tmp_.json', sep = '')
dest = paste(getwd(), tmp, sep = '/')
download.file(url = 'http://zachary.bse.vt.edu/static/epsg_catalog.json', destfile = dest)
rd = readLines(dest)
t = fromJSON(rd)
epsg_catalog = data.frame(do.call('cbind', t[[1]]))
file.remove(dest)
return(epsg_catalog)
}
epsg_catalog = load_epsg_catalog()
epsg_catalog
class(epsg_catalog)
view
str(epsg_catalog)
library(jsonlite)
load_epsg_catalog = function(){
tmp = paste(round(runif(1, 100000000, 900000000)), '_tmp_.json', sep = '')
dest = paste(getwd(), tmp, sep = '/')
download.file(url = 'http://zachary.bse.vt.edu/static/epsg_catalog.json', destfile = dest)
rd = readLines(dest)
t = fromJSON(rd)
epsg_catalog = data.frame(do.call('cbind', t[[1]]))
file.remove(dest)
return(epsg_catalog)
}
# short function for lapply in get_epsg_nc
download.nc = function(locs, save_loc){
download.file(url = locs[1], destfile = paste(save_loc, locs[2], sep = '/'))
}
# download nc files from epsg based on user query
get_cmip5_nc = function(model, scenario, realization, variable, save_loc){
epsg_catalog = load_epsg_catalog()
rowid = which(epsg_catalog[,2] == model & epsg_catalog[,3] == scenario & epsg_catalog[,4] == realization & epsg_catalog[,5] == variable)
file_list = epsg_catalog[rowid,6]
file_split = lapply(file_list, FUN = 'strsplit', split = '/')
file_here = lapply(file_split[[1]], '[[', length(file_split[[1]][[1]]))
file_list = unlist(file_list)
file_here = unlist(file_here)
locs = mapply(c, file_list, file_here, SIMPLIFY=FALSE)
lapply(locs, FUN = 'download.nc', save_loc = save_loc)
}
model = 'GFDL-ESM2M'
scenario = 'historical'
realization = 'r1i1p1'
variable = 'tasmin'
variable = 'tasmax'
save_loc = 'C:/Users/Andy/Desktop/auto_down/data'
get_cmip5_nc(model = model, scenario = scenario, realization = realization, variable = variable, save_loc = save_loc)
get_cmip5_nc(model = model, scenario = scenario, realization = realization, variable = variable, save_loc = save_loc)
str(str)
str(df)
head(df[,1:5])
load_epsg_catalog = function(){
tmp = paste(round(runif(1, 100000000, 900000000)), '_tmp_.json', sep = '')
dest = paste(getwd(), tmp, sep = '/')
download.file(url = 'http://zachary.bse.vt.edu/static/epsg_catalog.json', destfile = dest)
rd = readLines(dest)
t = fromJSON(rd)
epsg_catalog = data.frame(do.call('cbind', t[[1]]))
file.remove(dest)
return(epsg_catalog)
}
# short function for lapply in get_epsg_nc
download.nc = function(locs, save_loc){
download.file(url = locs[1], destfile = paste(save_loc, locs[2], sep = '/'))
}
# download nc files from epsg based on user query
get_cmip5_nc = function(model, scenario, realization, variable, save_loc){
epsg_catalog = load_epsg_catalog()
rowid = which(epsg_catalog[,2] == model & epsg_catalog[,3] == scenario & epsg_catalog[,4] == realization & epsg_catalog[,5] == variable)
file_list = unlist(epsg_catalog[rowid,6])
file_split = lapply(file_list, FUN = 'strsplit', split = '/')
file_here = unlist(lapply(file_split[[1]], '[[', length(file_split[[1]][[1]])))
locs = mapply(c, file_list, file_here, SIMPLIFY=FALSE)
lapply(locs, FUN = 'download.nc', save_loc = save_loc)
}
library(jsonlite)
load_epsg_catalog = function(){
tmp = paste(round(runif(1, 100000000, 900000000)), '_tmp_.json', sep = '')
dest = paste(getwd(), tmp, sep = '/')
download.file(url = 'http://zachary.bse.vt.edu/static/epsg_catalog.json', destfile = dest)
rd = readLines(dest)
t = fromJSON(rd)
epsg_catalog = data.frame(do.call('cbind', t[[1]]))
file.remove(dest)
return(epsg_catalog)
}
# short function for lapply in get_epsg_nc
download.nc = function(locs, save_loc){
download.file(url = locs[1], destfile = paste(save_loc, locs[2], sep = '/'))
}
# download nc files from epsg based on user query
get_cmip5_nc = function(model, scenario, realization, variable, save_loc){
epsg_catalog = load_epsg_catalog()
rowid = which(epsg_catalog[,2] == model & epsg_catalog[,3] == scenario & epsg_catalog[,4] == realization & epsg_catalog[,5] == variable)
file_list = unlist(epsg_catalog[rowid,6])
file_split = lapply(file_list, FUN = 'strsplit', split = '/')
file_here = unlist(lapply(file_split[[1]], '[[', length(file_split[[1]][[1]])))
locs = mapply(c, file_list, file_here, SIMPLIFY=FALSE)
lapply(locs, FUN = 'download.nc', save_loc = save_loc)
}
model = 'GFDL-ESM2M'
scenario = 'historical'
realization = 'r1i1p1'
variable = 'tasmax'
save_loc = 'C:/Users/Andy/Desktop/auto_down/data'
get_cmip5_nc(model = model, scenario = scenario, realization = realization, variable = variable, save_loc = save_loc)
model = 'GFDL-ESM2M'
scenario = 'historical'
realization = 'r1i1p1'
variable = 'tasmax'
save_loc = 'C:/Users/Andy/Desktop/auto_down/data'
get_cmip5_nc(model = model, scenario = scenario, realization = realization, variable = variable, save_loc = save_loc)
get_cmip5_nc(model = model, scenario = scenario, realization = realization, variable = variable, save_loc = save_loc)
library(jsonlite)
load_epsg_catalog = function(){
tmp = paste(round(runif(1, 100000000, 900000000)), '_tmp_.json', sep = '')
dest = paste(getwd(), tmp, sep = '/')
download.file(url = 'http://zachary.bse.vt.edu/static/epsg_catalog.json', destfile = dest)
rd = readLines(dest)
t = fromJSON(rd)
epsg_catalog = data.frame(do.call('cbind', t[[1]]))
file.remove(dest)
return(epsg_catalog)
}
# short function for lapply in get_epsg_nc
download.nc = function(locs, save_loc){
download.file(url = locs[1], destfile = paste(save_loc, locs[2], sep = '/'))
}
# download nc files from epsg based on user query
get_cmip5_nc = function(model, scenario, realization, variable, save_loc){
epsg_catalog = load_epsg_catalog()
rowid = which(epsg_catalog[,2] == model & epsg_catalog[,3] == scenario & epsg_catalog[,4] == realization & epsg_catalog[,5] == variable)
file_list = epsg_catalog[rowid,6]
file_split = lapply(file_list, FUN = 'strsplit', split = '/')
file_here = lapply(file_split[[1]], '[[', length(file_split[[1]][[1]]))
file_list = unlist(file_list)
file_here = unlist(file_here)
locs = mapply(c, file_list, file_here, SIMPLIFY=FALSE)
lapply(locs, FUN = 'download.nc', save_loc = save_loc)
}
get_cmip5_nc(model = model, scenario = scenario, realization = realization, variable = variable, save_loc = save_loc)
locs
epsg_catalog = load_epsg_catalog()
rowid = which(epsg_catalog[,2] == model & epsg_catalog[,3] == scenario & epsg_catalog[,4] == realization & epsg_catalog[,5] == variable)
rowid
file_list = epsg_catalog[rowid,6]
file_split = lapply(file_list, FUN = 'strsplit', split = '/')
file_here = lapply(file_split[[1]], '[[', length(file_split[[1]][[1]]))
file_list = unlist(file_list)
file_here = unlist(file_here)
locs = mapply(c, file_list, file_here, SIMPLIFY=FALSE)
locs
locs[1]
lapply(locs, FUN = 'download.nc', save_loc = save_loc)
inp = locs[3]
inp
download.nc(inp[1], inp[2])
inp[1]
locs = mapply(c, file_list, file_here, SIMPLIFY=FALSE)
locs
locs[1]
locs[[[1]][1]
locs[[1]][1]
file_list = unlist(file_list)
file_list
locs = mapply(c, file_list, file_here, SIMPLIFY=FALSE)
locs
locs[3]
lapply(locs, FUN = 'download.nc', save_loc = save_loc)
library(h2o)
install.packages(c("manipulate", "Matrix", "Rcpp"))
library(h2o)
library(h2oEnsemble)
# start decent size (more ram than needed for this)
df1 <- h2o.importFile(path = normalizePath("../10-4-16/numerai_training_data.csv"))
#df2 <- h2o.importFile(path = "/Users/Andy/Desktop/numerai/9-21-16/numerai_training_data.csv")
test_real <- h2o.importFile(path = normalizePath("../10-4-16/numerai_tournament_data.csv"))
y <- "target"
df1[,y] <- as.factor(df1[,y])
h2o.init(nthreads=-1, max_mem_size="16G")
install.packages('h2o')
install.packages('h2o')
library(h2o)
install.packages('h2o')
install.packages('h2o')
install.packages("h2o", source)
install.packages("h2o", type =source)
install.packages("h2o", type = "source")
library(h2o)
library(h2o)
library(Metrics)
h2o.init(nthreads=-1, max_mem_size="6G")
h2o.removeAll()
h2o.removeAll()
h2o.shutdown(prompt = FALSE)
library(installr)
updateR()
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
setwd("C/Users/Andy/Desktop/r-package/startml")
setwd("C:/Users/Andy/Desktop/r-package/startml")
create("startml")
setwd("C:/Users/Andy/Desktop/r-package/startml")
library(startml)
h2o.shutdown(prompt = FALSE)
h2o.init(nthreads=6, max_mem_size="12G")
wd <- "C:/Users/Andy/Desktop/auto"
setwd(wd)
train_file <- "train_rus.csv"
test_file <- "test_rus.csv"
load_data <- function(train_file) {
df1 <- h2o.importFile(path = normalizePath(train_file))
df1
}
# test
df1 <- load_data(train_file)
new_data <- load_data(test_file)
# define the inputs
y = "price_doc"
x <- setdiff(names(df1), y)[-1]
id <- names(df1)[1]
# test on regression data
#library(methods)
h2o.shutdown(prompt = FALSE)
install.packages("devtools")
library(devtools)
library(devtools)
install.packages("devtools")
install.packages("devtools")
fuckers
kfkfds
a hundred
library(devtools)
install.packages("github/andrewsommerlot/startml")
install_github("andrewsommerlot/startml")
library(startml)
h2o.init()
h2o.init()
h2o.init()
h20,init()
h2o.init()
library(startml)
h2o.init()
trn <- h2o.importFile("/home/andrewrs/Desktop/github/startml/data/train.csv")
tst <- h2o.importFile("/home/andrewrs/Desktop/github/startml/data/test.csv")
test_out <- startml(labeled_data = trn,
newdata = tst,
label_id = 'Id',
y = 'SalePrice',
split_seed = 1234,
runtime_secs = 360,
eval_metric = "RMSE"
)
tst <- h2o.importFile("/home/andrewrs/Desktop/github/startml/data/test.csv")
# first look at all models
plot(test_out)
plot(test_out)
# trim a few models
test_trim <- trim(test_out,
eval_metric = 'RMSE',
eval_threshold = 30000)
# look at the trimmed models
plot(test_trim)
# quick deep learning ensemble of trimed models
test_trim <- ensemble(test_trim,
algorithm = 'deeplearning',
keep_features = FALSE,
grid_search = TRUE,
eval_metric = "RMSE",
percent_reduce = 20,
runtime_secs = 300)
plot(test_trim)
dev.off()
inspect <- h2o.getModel("dl_model_2")
dl_hidden_plot <- plot_dlayer(inspect,
max_points = 1000,
vis_data = test_trim@train[[1]],
label = "SalePrice",
layer = 3,
dimentions = 3)
inspect <- h2o.getModel("dl_model_2")
plot(test_trim)
dev.off()
# closer look at deep learning ensemble model
inspect <- h2o.getModel("dl_model_2")
# closer look at deep learning ensemble model
inspect <- h2o.getModel("dl_model_1")
# closer look at deep learning ensemble model
inspect <- h2o.getModel("dl_model_0")
inspect <- test_trim@models$`/home/andrewrs/Desktop/github/startml/dl_models/dl_model_2`
dl_hidden_plot <- plot_dlayer(inspect,
max_points = 1000,
vis_data = test_trim@train[[1]],
label = "SalePrice",
layer = 3,
dimentions = 3)
inspect <- test_trim@models$`/home/andrewrs/Desktop/github/startml/dl_models/dl_model_1`
dl_hidden_plot <- plot_dlayer(inspect,
max_points = 1000,
vis_data = test_trim@train[[1]],
label = "SalePrice",
layer = 3,
dimentions = 3)
library(startml)
library(startml)
h2o.init()
trn <- h2o.importFile("/home/andrewrs/Desktop/github/startml/data/train.csv")
tst <- h2o.importFile("/home/andrewrs/Desktop/github/startml/data/test.csv")
test_out <- startml(labeled_data = trn,
newdata = tst,
label_id = 'Id',
y = 'SalePrice',
split_seed = 1234,
runtime_secs = 360,
eval_metric = "RMSE"
)
