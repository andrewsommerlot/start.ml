{
    "collab_server" : "",
    "contents" : "#' plot\n#'\n#' Masked from graphics. Summary plot of mlblob object.\n#'\n#' @param mlout mlblob object from output of startml function.\n#' @return None. Plots graphic to device.\n#' @export\nplot <- function(mlout) { suppressWarnings(\n  if(class(mlout)[1] == \"mlblob\") {\n    if(class(mlout@models[[1]]) == \"H2OBinomialModel\") {\n      stop(\"Does not yet support binomial model summary\")\n    } else if(class(mlout@models[[1]]) == \"H2ORegressionModel\") {\n      train_rmse <- lapply(mlout@models, get_hist)\n      longest <- max(unlist(lapply(train_rmse, length)))\n      train_hist <- even_lengths(train_rmse)\n      hist_df <- as.data.frame(do.call('cbind', train_hist))\n      ids <- sapply(mlout@models, get_ids)\n      ids_split <- sapply(names(ids), strsplit, split = \"/\")\n      ids_final <- sapply(ids_split, `[`, length(ids_split[[1]]))\n      iter <- seq(0, longest - 1, by = 1)\n      colnames(hist_df) <- ids_final\n      hist_df$iteration <- iter\n      hist_melted <- melt(hist_df, ncol(hist_df))\n      hist_melted <- hist_melted[-which(is.na(hist_melted$value)),]\n      ids_final <- as.list(ids_final)\n      hist_lab <- lapply(ids_final, hist_text, hist_melted = hist_melted)\n      hist_all <- do.call('rbind', hist_lab)\n      p_history <- ggplot(hist_all) +\n        geom_line(aes(x = iteration, y = value, color = variable),\n                  alpha = 0.5, size = 1.2) +\n        geom_text(aes(label = variable, x = lab_x, colour = variable,\n                      y = lab_y, hjust = \"inward\"),\n                  alpha = 1, check_overlap = TRUE, size = 3) +\n        guides(color = FALSE) +\n        ggtitle(\"Training History of Models on Valid\") +\n        ylab(\"RMSE\") +\n        xlab(\"Iterations\")\n      # make the histograms\n      y = mlout@y\n      all_target <- as.data.frame(mlout@labeled_data[[1]][,y])[,1]\n      max_length <- length(all_target)\n      train_target <- c(as.data.frame(mlout@train[[1]][,y])[,1],\n                        rep(NA, max_length - nrow(mlout@train[[1]][,y])))\n      valid_target <- c(as.data.frame(mlout@valid[[1]][,y])[,1],\n                        rep(NA, max_length - nrow(mlout@valid[[1]][,y])))\n      test_target <- c(as.data.frame(mlout@test[[1]][,y])[,1],\n                       rep(NA, max_length - nrow(mlout@test[[1]][,y])))\n      target_df <- data.frame(all = all_target,\n                              train = train_target,\n                              valid = valid_target,\n                              test = test_target)\n\n      # now melt\n      target_melted <- melt(target_df)\n      # now plot\n      p_target <- ggplot(target_melted) +\n        geom_histogram(aes(x = value, y = ..density..), bins = 20) +\n        geom_vline(data = ddply(target_melted , \"variable\",\n                                summarize, wavg = mean(na.omit(value))),\n                   aes(xintercept=wavg, color = \"green\")) +\n        geom_vline(data = ddply(target_melted , \"variable\", summarize,\n                                wavg = median(na.omit(value))),\n                   aes(xintercept=wavg, color = \"orange\")) +\n        geom_density(aes(value, color = \"blue\"), alpha = 0.8) +\n        facet_wrap(~variable) +\n        scale_color_manual(name = '', values = c(\"green\" = \"green\",\n                                                 \"orange\" = \"orange\",\n                                                 \"blue\" = \"blue\"),\n                           labels = c(\"Kernel\", 'Mean','Median')) +\n        xlab(y) +\n        ylab(\"Density\") +\n        ggtitle(paste(y, \"in Labeled Data Splits\")) +\n        theme(axis.text.x=element_text(angle = -45, hjust = 0))\n      # make the xy plot ======================\n      for(i in 1:length(mlout@predict_test)) {\n        names(mlout@predict_test[[i]]) <- ids_final[[i]]\n        }\n      xy_df <- do.call(h2o.cbind, mlout@predict_test)\n      xy_df$labeled <- mlout@test[[1]][,y]\n      xy_melted <- melt(as.data.frame(xy_df), ncol(xy_df))\n      p_xy <- ggplot(xy_melted) +\n        geom_point(aes(x = labeled, y = value, color = variable), alpha = 0.5) +\n        geom_point(aes(x = labeled, y = labeled), color = \"black\", alpha = 0.5) +\n        guides(color = FALSE) +\n        xlab(paste(\"Labeled\",  y)) +\n        ylab(paste(\"Predicted\", y)) +\n        ggtitle(\"Labels vs Predictions on Test\")\n      # the order plot ======================\n      pred_melted <- melt(as.data.frame(xy_df), ncol(xy_df))\n      p_order <- ggplot(pred_melted[order(pred_melted$labeled),]) +\n        geom_point(aes(x = seq(1, nrow(pred_melted)), y = value,\n                       color = variable), alpha = 0.6) +\n        geom_point(aes(x = seq(1, nrow(pred_melted)), y = labeled),\n                   size = .8) +\n        scale_color_discrete(guide=FALSE) +\n        ylab(y) +\n        xlab(paste(\"Index: Ordered By Asending\", y)) +\n        ggtitle(\"Labels and Predictions on Test\")\n      # Plot everything on the grid\n      grid.arrange(p_history, p_order, p_target, p_xy, ncol = 2, nrow = 2)\n    }\n  } else {\n    plot(mlout)\n  }\n)}\n",
    "created" : 1496010164534.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1746454099",
    "id" : "37AD3D49",
    "lastKnownWriteTime" : 1496013471,
    "last_content_update" : 1496013471572,
    "path" : "C:/Users/Andy/Desktop/r-package/startml/R/plot.R",
    "project_path" : "R/plot.R",
    "properties" : {
    },
    "relative_order" : 18,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}