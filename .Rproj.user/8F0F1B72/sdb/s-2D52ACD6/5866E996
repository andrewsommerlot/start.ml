{
    "collab_server" : "",
    "contents" : "#' startml\n#'\n#' startml is designed to run automatic hyperparameter searches for deep leaning\n#' gradient boosted machine, and random forest models. It selects best models, and combines\n#' or ensembles them in hopes making good predictions from an ensemble or highly skilled single\n#' model using just one function call. Machine learning algorithms are provided by h2o and\n#' run on the h2o JVM platform outside of the R workspace. Thus, much of the functionalies in startml are\n#' scalable. Currently, startml only supports regression and binary classification.\n#'\n#' @param labeled_data H2O frame object containing labeled data for model training.\n#' No Default.\n#' @param newdata H2O frame object containing unlabeled data for model predictions.\n#' No Default.\n#' @param y Character object of length 1 identifying the column name of the target variable. No Default.\n#' @param y_type Character object of length 1 identifying the type of data the target variable is. Can be \"continuous\" or \"discrete.\" Coninuous automatically creates regression models, and discrete automatically creates binomial models. Currently, startml only supports regression and binary classification.\n#' @param x Character object of length 1 or more identifying the column name(s) of the input variables. Default NULL, uses all remaining variables in labeled_data as inputs. Newdata must contian all of these input column names.\n#' @param label_id Character object of length 1 identifying the name of the column of observation IDs in labeled_data. If used, must match column of same name in newdata. startml will ignore this column as an input, but include it as an ID column in prediction outputs.\n#' @param algorithms Character object of length 3, 2, or 1, specifying which alrogrithms to automatically train. The autotrain function will run a separate grid search for each algorimth type. Choices are: \"deeplearning\", \"randomForest\", and \"gbm\" following the naming convention in H2O version 3. Defaults to c(\"deeplearning\", \"randomForest\", \"gbm\").\n#' @param eval_metric Character object defining evaluation metric for training. Defualt is \"AUTO\" and uses built-in H2O automatic choice for target data type.\n#' @param validation_type Defines validation type for training models.  Defaults to \"shared_holdout\" indicating all model built with all algorithms share the same validation set. Currently, this is the only option in autotrain. Planned types include \"random_holdout\" where each model will get a unique randomized sample of labeled data for validation, and \"xval\" in which the cross validation functionality in H2O will be implemented in every model.\n#' @param percent_valid_holdout Numeric object of value 0 to 100. Sets the percent of the labeled data that will be used for holdout validation. Default is 10. Is ignored if validation_type = \"xval.\" Currently startml only supports \"shared_holdout\" validation.\n#' @param percent_test_holdout  Numeric object of value 0 to 100. Sets the percent of the labeled data that will be used for test holdout for model selection. Default is 10.\n#' @param runtime_secs Character Object which sets the length of time each grid search will run. Defaults to 20, thus the default runtime is 20 sec * (length of algorimths) = 1 minute.\n#' @param split_seed Random seed for splitting labeled data into train, validation, and test components. Currently, startml only supports random sampling splits, this argument sets the random seed for these splits, making the data set separation process reproducible. Since this is a \"naive\" random split, labeled data should be shuffled before hand.\n#' @param wd Character object defining file path where resulting modeling will be saved. Defualts to current working directory.\n#' @param number_top_models Numeric object indicating number of top models to return. Defualt is 10. If number entered is greater than number of model, whole model list is returned.\n#' @param eval_threshold Numeric object defining the performance threshold models must meet to be used in prediction. Is minimum for maximization loss function (i.e., AUC) and maximum for minimization loss functions (logloss, MSE, etc). Default is NULL, returns models without performance consideration.\n#' @param correlation_threshold Numeric object defining the maximum person correlation allowed in the group of resulting models. If two models show high correlation, the one with surperior performance will be kept and the other dropped. Value ranges from -1 to 1, default is NULL, returning models without correlation considered.\n#' @param return_dataframe Boolean, if TRUE startml will attempt to return a data.frame of the resulting predictions for each new data row. This will only work if the resulting predictions from new data are small enough to be stored in the R workspace. Though, when working with smaller datasets, such as some competitions, this can be very convient. The same object is stored in the H2O space and can be accessed with the name set as the ouput of startml and manipulated with functions from the h2o R package. Default is FALSE.\n#' @return Object of class mlblob using S4 type. mlblob objects contain all selected models, their predictions on train, validation, test, and new data, and can be plotted using plot() showing a summary of the model group.\n#' @export\nstartml <-  function(labeled_data,\n                      newdata,\n                      y,\n                      x = NULL,\n                      label_id = NULL,\n                      y_type,\n                      algorithms = c(\"deeplearning\", \"randomForest\", \"gbm\"),\n                      eval_metric = \"AUTO\",\n                      validation_type = \"shared_holdout\", # add RandomHoldout and cv\n                      percent_valid_holdout = 10,\n                      percent_test_holdout = 10,\n                      runtime_secs = 10,\n                      split_seed = NULL,\n                      number_top_models = NULL,\n                      eval_threshold = NULL,\n                      correlation_threshold = 0,\n                      return_dataframe = FALSE,\n                      wd = getwd()) {\n\n  if(validation_type == \"shared_holdout\" && is.null(split_seed)) {\n    stop(\"Set 'split_seed' to any real number for common random sampling when validation = SharedHoldout\")\n  }\n\n  # This needs to be replaced ==========================================\n  # only works with shared holdout.\n  # need condition for other holdout.\n  if(validation_type == \"shared_holdout\" | validation_type == \"random_holdout\") {\n    splits <- h2o.splitFrame(labeled_data,\n                             c((1 - ((percent_valid_holdout/100) + (percent_test_holdout/100))),\n                               (percent_test_holdout/100)),\n                               seed = split_seed)\n    train  <- h2o.assign(splits[[1]], \"train.hex\")\n    valid  <- h2o.assign(splits[[2]], \"valid.hex\")\n    test  <- h2o.assign(splits[[3]], \"test.hex\")\n  } else if(validation_type == \"xval\") {\n    splits <- h2o.splitFrame(train, 1 - (percent_test_holdout/100), seed = split_seed)\n    train  <- h2o.assign(splits[[1]], \"train.hex\")\n    test  <- h2o.assign(splits[[2]], \"test.hex\")\n  } else {\n    stop(\"Choose 'shared_holdout', 'random_holdout', or 'xval' for validation_type\")\n  }\n\n  # define x as all others if not specified\n  if(is.null(x)) {\n    x <- setdiff(names(labeled_data), y)\n  }\n\n  if(!is.null(label_id)) {\n    if(sum(x %in% label_id) > 0) {\n      x <- x[-which(x == label_id)]\n    } else {\n      x <- x\n      }\n  }\n\n  #===============================================\n  # commented out for now, works when startml\n  #  is stand alone functin, does not as\n  #  part of package. Potential solves: something\n  #  to do with methods package or versions of\n  #  dependencies\n  # set variable type for proper auto options\n  #if(y_type == \"discrete\") {\n  #  train[,y] <- as.factor(train[,y])\n  #  valid[,y] <- as.factor(valid[,y])\n  #  test[,y] <- as.factor(test[,y])\n  #} else {\n  #  train[,y] <- as.numeric(train[,y])\n  #  valid[,y] <- as.numeric(valid[,y])\n  #  test[,y] <- as.numeric(test[,y])\n  #}\n  #===============================================\n\n  #==============================================\n  # other fix is considering removing y_type argument\n  #  in favor of doing this during data prep outside\n  #  startml.\n  #==============================================\n\n  all_models <- autotrain(train = train,\n                                valid = valid,\n                                y = y,\n                                x = x,\n                                algorithms = algorithms,\n                                eval_metric = eval_metric,\n                                runtime_secs = runtime_secs,\n                                wd = wd)\n  # ===================================================================\n\n  if(!is.null(number_top_models)) {\n    cat(\"\\nChoosing Top Performing Models on Validation\")\n    sorted_models <- sort_models(all_models,\n                                 eval_metric = eval_metric)\n    selected_models <- top_models(sorted_models,\n                                  all_models,\n                                  number_top_models = number_top_models)\n  } else {\n    cat(\"\\nChoosing Models on Test based on Performance and Correlation Thresholds\\n\")\n    selected_models <- select_models(model_list = all_models,\n                                     test = test,\n                                     eval_metric = eval_metric,\n                                     eval_threshold = eval_threshold,\n                                     y = y,\n                                     correlation_threshold = correlation_threshold)\n  }\n    cat(\"\\nSaving Train Predictions with Selected Models\\n\")\n    train_predictions <- predict_blob(test = train, selected_models)\n    cat(\"\\nSaving Valid Predictions with Selected Models\\n\")\n    valid_predictions <- predict_blob(test = valid, selected_models)\n    cat(\"\\nSaving Test Predictions with Selected Models\\n\")\n    test_predictions <- predict_blob(test = test, selected_models)\n    cat(\"\\nPredicting on New Data with Selected Models\\n\")\n    newdata_predictions <- predict_blob(test = new_data, selected_models)\n\n    # needs work.\n    # make the index dataframe, trivially all 1s for shared holout\n    index = data.frame(model_num = seq(1, length(selected_models)),\n                       train_id = rep(1, length(selected_models)),\n                       valid_id = rep(1, length(selected_models)),\n                       test_id = rep(1, length(selected_models)))\n\n    # =================================================\n    if(return_dataframe == FALSE) {\n      # build the output object of new class mlblob\n      mlout <- new(\"mlblob\",\n                   models = selected_models,\n                   labeled_data = list(labeled_data),\n                   train = list(train),\n                   valid = list(valid),\n                   test = list(test),\n                   new_data = list(new_data),\n                   predict_train = train_predictions,\n                   predict_valid = valid_predictions,\n                   predict_test = test_predictions,\n                   predict_newdata = newdata_predictions,\n                   index = index,\n                   y = y,\n                   x = x,\n                   output = data.frame(mlblob.output = \"No R object Returned, set return_dataframe to TRUE\"))\n    } else {\n      warning(\"Returning R object in currently in the works\")\n    }\n    mlout\n}\n",
    "created" : 1496019390344.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1093495522",
    "id" : "5866E996",
    "lastKnownWriteTime" : 1496021425,
    "last_content_update" : 1496021425314,
    "path" : "C:/Users/Andy/Desktop/auto/startml/R/startml.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 26,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}