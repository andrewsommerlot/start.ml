{
    "collab_server" : "",
    "contents" : "#=========================================================\n# first try at full R package..\n#============================================================\n\nlibrary(devtools)\ninstall_github(\"andrewsommerlot/startml\")\n\nlibrary(startml)\n\nh2o.removeAll()\nh2o.shutdown(prompt = FALSE)\nh2o.init(nthreads=6, max_mem_size=\"12G\")\n\nwd <- \"C:/Users/Andy/Desktop/auto\"\nsetwd(wd)\n\ntrain_file <- \"train.csv\"\ntest_file <- \"test.csv\"\n\n\nload_data <- function(train_file) {\n  df1 <- h2o.importFile(path = normalizePath(train_file))\n  df1\n}\n\n# test\ndf1 <- load_data(train_file)\nnew_data <- load_data(test_file)\n\n# define the inputs\ny = \"SalePrice\"\nx <- setdiff(names(df1), y)[-1]\nid <- names(df1)[1]\n# test on regression data\n#library(methods)\n\n# run the ml file on binary classification.\nmlout <- startml(labeled_data = df1,\n                 newdata = new_data,\n                 x = x,\n                 label_id = id,\n                 y = \"SalePrice\",\n                 y_type = \"continuous\",\n                 eval_metric = \"RMSE\",\n                 eval_threshold = NULL,\n                 validation_type = \"shared_holdout\",\n                 algorithms = c(\"gbm\", \"deeplearning\", \"randomForest\"),\n                 percent_valid_holdout = 10,\n                 percent_test_holdout = 10,\n                 runtime_secs = 60,\n                 split_seed = 1234,\n                 number_top_models = NULL,\n                 correlation_threshold = NULL)\n\nplot(mlout)\n\n\n\n\n\n\n\n#============================================================\n## the prepare function\n# if shat breaks:\n#install.packages(\"h2o\", type=\"source\", repos=(c(\"http://h2o-release.s3.amazonaws.com/h2o/rel-tverberg/4/R\")))\n# load libraries\n#install.packages(\"h2o\")\nlibrary(h2o)\n#library(cvAUC)\ninstall.packages(c(\"Metrics\", \"ggplot2\", \"reshape2\"))\nlibrary(Metrics)\nlibrary(ggplot2)\nlibrary(reshape2)\nlibrary(plyr)\ninstall.packages(\"gridExtra\")\nlibrary(gridExtra)\nlibrary(plotly)\ninstall.packages(\"tsne\")\nlibrary(tsne)\ninstall.packages(\"plotly\")\nlibrary(plotly)\n\n\n#library(h2oEnsemble)\n\n\n## start decent size (more ram than needed for this)\nh2o.shutdown(prompt = FALSE)\nh2o.init(nthreads=6, max_mem_size=\"12G\")\n\nh2o.removeAll()\n\nload_files <- as.list(list.files(path = wd <- \"C:/Users/Andy/Desktop/auto/startml/R/\",\n                                 pattern = \"*\", full.names = TRUE))\n#load_files <- load_files[-which(load_files %in% \"C:/Users/Andy/Desktop/auto/start.ml/start_setup.R\")]\n\ngetfiles <- lapply(load_files, source)\n\n# extra\nwd <- \"C:/Users/Andy/Desktop/auto\"\nsetwd(wd)\n\ntrain_file <- \"numerai_training_data.csv\"\ntest_file <- \"numerai_tournament_data.csv\"\ny_name <- \"target\"\ny_type <- \"discrete\" # or \"continous\"\n\n#============================================================\n# the load data function.\nstart.loaddata <- function(train_file) {\n  df1 <- h2o.importFile(path = normalizePath(train_file))\n  df1\n}\n\n# test need to rename all test things that are actually new data, new data\ndf1 <- start.loaddata(train_file)\nnewdata <- start.loaddata(test_file)\n\n#h2o.init(strict_version_check = FALSE)\n# run the ml file on binary classification.\nmlout <- startml(labeled_data = df1, newdata = newdata,\n                  y = \"target\", y_type = \"discrete\",\n                  algorithms = c(\"deeplearning\", \"randomForest\", \"gbm\"),\n                  eval_metric = \"AUC\",\n                  validation_type = \"shared_holdout\", # add RandomHoldout and cv\n                  percent_valid_holdout = 10,\n                  percent_test_holdout = 10,\n                  runtime_secs = 5,\n                  split_seed = 1234,\n                  number_top_models = NULL,\n                  eval_threshold = NULL,\n                  correlation_threshold = NULL,\n                  return_dataframe = FALSE)\n\nstart.plot(mlout)\n\n\n\ntest <- start.gbmgrid(train = df1,\n                          y_name = \"target\",\n                          y_type = \"discrete\",\n                          eval_metric = \"AUTO\",\n                          validation_type = \"SharedHoldout\",\n                          wd = getwd(),\n                          percent_valid_holdout = 10,\n                          percent_test_holdout = 10,\n                          folds = NULL,\n                          gbm_min_depth = 1,\n                          gbm_max_depth = 7,\n                          gbm_runtime_secs = 10,\n                          gbm_stopping_rounds = 10,\n                          gbm_stopping_tolerance = 1e-5,\n                          grid_strategy = \"RandomDiscrete\",\n                          split_seed = NULL)\n\n\n\n\n\n# for testing\n# run the ml file on binary classification.\nmodels <- start.autotrain(train = df1,\n                  y_name = \"target\",\n                  y_type = \"discrete\",\n                  eval_metric = \"logloss\",\n                  validation_type = \"SharedHoldout\",\n                  split_seed = 1234\n)\n\n\n#============================================================\n# the load data function.\n# now try a regression ......\n# test on kaggle housing prices ...\nh2o.removeAll()\n\nload_files <- as.list(list.files(path = \"C:/Users/Andy/Desktop/auto/startml/R\",\n                                 pattern = \"*\", full.names = TRUE))\n#load_files <- load_files[-which(load_files %in% \"C:/Users/Andy/Desktop/auto/start.ml/R/start_setup.R\")]\n\ngetfiles <- lapply(load_files, source)\n\n# extra\nwd <- \"C:/Users/Andy/Desktop/auto\"\nsetwd(wd)\n\ntrain_file <- \"train.csv\"\ntest_file <- \"test.csv\"\n\n\nstart.loaddata <- function(train_file) {\n  df1 <- h2o.importFile(path = normalizePath(train_file))\n  df1\n}\n\n# test\ndf1 <- start.loaddata(train_file)\nnew_data <- start.loaddata(test_file)\ny = \"SalePrice\"\nx <- setdiff(names(df1), y)[-1]\nid <- names(df1)[1]\n# test on regression data\n# run the ml file on binary classification.\nmlout <- startml(labeled_data = df1,\n                  newdata = new_data,\n                  x = x,\n                  label_id = id,\n                  y = \"SalePrice\",\n                  y_type = \"continuous\",\n                  eval_metric = \"RMSE\",\n                  eval_threshold = NULL,\n                  validation_type = \"shared_holdout\",\n                  algorithms = c(\"deeplearning\"),\n                  percent_valid_holdout = 10,\n                  percent_test_holdout = 10,\n                  runtime_secs = 60*5,\n                  split_seed = 1234,\n                  number_top_models = NULL,\n                  correlation_threshold = 1\n\n)\n\nplot(mlout)\n\n\ngetfiles <- lapply(load_files, source)\n\nin_model <- mlout@models$`C:/Users/Andy/Desktop/auto/dl_models/dl_model_0`\n\n#model, vis_data, layer, label, dimentions = 2, max_points = 1000)\nplot_dlayer(model = in_model,\n            vis_data = df1,\n            layer = 1,\n            label = \"LotArea\",\n            dimentions = 3,\n            max_points = 1400,\n            tsne_iter = 200)\n\n\ntdat <- as.data.frame(df1)\n\nggplot(tdat) +\n  geom_point(aes(x = Neighborhood, y = YearRemodAdd)) +\n  coord_flip()\n\n\ntest <- data.frame(one = c(1,2,3), two = c(4,5,6), three = c(7,8,9), lab = as.factor(c(\"this\", \"that\", \"this\")),\n                   colors = c('#BF382A', '#0C4B8E'))\n p <- plot_ly(test,\n              x = ~one,\n              y = ~two,\n              z = ~three,\n              color = ~lab) %>%\n      add_markers() %>%\n      layout(scene = list(xaxis = list(title = \"tSNE Dim 1\"),\n                          yaxis = list(title = \"tSNE Dim 2\"),\n                          zaxis = list(title = \"tSNE Dim 3\")))\n\nhtmlwidgets::saveWidget(as_widget(p), \"dl-hidden-layer-plot.html\")\n\n\n\n# for now to get different metrics working\nmodel_list <- start.autotrain(train = df1,\n                  #test = test,\n                  y_name = \"SalePrice\",\n                  y_type = \"continuous\",\n                  eval_metric = \"MSE\",\n                  validation_type = \"SharedHoldout\",\n                  runtime_secs = 7200,\n                  split_seed = 1234\n)\n\n\nmetric <- start.validmetric(model_list, eval_metric = \"RMSLE\")\n\nsorted_models <- start.sortmodels(model_list, eval_metric = eval_metric)\n\nselected_models <- start.selectmodels(sorted_models, model_list, number_top_models = 5)\n\n\npredictions <- start.predict(test = test, selected_models)\n\n# test\n# make a data frame\nr_data <- lapply(predictions, as.data.frame)\npred_df <- do.call('cbind', r_data)\nbasic_bag <- rowMeans(pred_df)\nr_test <- as.data.frame(test)\nid <- r_test$Id\noutput <- data.frame(Id = id, SalePrice = basic_bag)\n\nwrite.csv(output, \"test_sub_2.csv\", row.names = FALSE, quote = FALSE)\n\n# view all models\n\nvalidations <- start.predict(train, selected_models)\nr_val <- lapply(validations, as.data.frame)\nvalid_df <- do.call('cbind', r_val)\n\n#!! some correlation check\ncorr <- cor(valid_df)\n# uncorrelateds are 140 and 300\n\ncor(valid_df[,1], valid_df[,80])\n\nuncor <- c(1, 80)\n\nval_bag <- rowMeans(valid_df)\n\nperformance <- data.frame(valid_df, val_mean = val_bag, as.data.frame(train$SalePrice))\nperformance <- data.frame(valid_df[, uncor], val_mean = val_bag, as.data.frame(valid$SalePrice))\n\n\nlibrary(ggplot2)\nlibrary(reshape2)\nlibrary(magrittr)\n\nm_per <- melt(performance, c(ncol(performance) - 1,  ncol(performance)))\n\n# probably deleate\n#m_per$variable <- as.numeric(m_per$variable)\n\nm_per[order(m_per$SalePrice),] %>%\n  ggplot() +\n  geom_point(aes(x = seq(1, nrow(m_per)), y = value, color = variable), alpha = 0.3) +\n  geom_point(aes(x = seq(1, nrow(m_per)), y = SalePrice), col = \"blue\") +\n  geom_point(aes(x = seq(1, nrow(m_per)), y = val_mean),color = \"black\", alpha = 0.8, size = .5) +\n  scale_color_discrete(guide=FALSE) +\n  #theme_grey() +\n  xlim(c(6000,6750)) +\n  ylim(c(200000, 800000))\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1495998147992.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "513372949",
    "id" : "44DC5155",
    "lastKnownWriteTime" : 1496021566,
    "last_content_update" : 1496021566476,
    "path" : "C:/Users/Andy/Desktop/auto/start_setup.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}