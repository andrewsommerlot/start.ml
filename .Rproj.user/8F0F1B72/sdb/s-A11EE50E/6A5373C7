{
    "collab_server" : "",
    "contents" : "#' plot_dlayer\n\n#' Visualize hidden layer activations in a deep learning model with dimentionality reduction and variable labels\n#' @param model H2O model object containing labeled data for model training.\n#' No Default.\n#' @param vis_data H2O frame object containing data to caculate layer activations.\n#' No Default.\n#' @param layer Numeric object of length 1 identifying the which hidden layer to visualize.\n#' No Defalut.\n#' @param label Character object of length 1 identifying the column name of the variable in vis_data to label visulaizaion points with. No Default.\n#' @param dimentions Numeric object set to 2 or 3, 2 returns ggplot figure, 3 returns plotly html page\n#' @param max_points Numeric object setting maximum number of observations in visualization. A number of rows equal to max_points from vis_data are sampled with out replacement for the visulaization.\n#' @param tsne_iter Numberic object sets the number of iterations in t-tailed stochastic nearest neighbors dimentionality reduction operation. Defaults to 1000.\n#' @param wd Character object defining file path where html interactive graphic will be saved if dimentions = 3. Defaults to current working directory.\n#' @return None\n#' @export\nplot_dlayer <- function(model,\n                        vis_data,\n                        layer,\n                        label,\n                        dimentions = 2,\n                        max_points = 1000,\n                        tsne_iter = 1000,\n                        wd = getwd()) {\n  samp <- sample(x = 1:nrow(vis_data), size = max_points)\n  samp <- samp[order(samp)]\n  view_label <- vis_data[samp, label]\n  names(view_label) <- label\n  dat <- vis_data[samp,]\n  cat(\"Getting hidden layer values from DL model\\n\")\n  dlayer <- as.data.frame(h2o.deepfeatures(model, dat, layer = layer))\n  if(dimentions == 2) {\n    cat(\"Starting tSNE dimentionality reduction\")\n    dat_tsne <- tsne(X = dlayer,\n                     k = dimentions,\n                     initial_dims = dim(dlayer)[2],\n                     max_iter = tsne_iter)\n    vis_label <- as.data.frame(view_label)[,1]\n    dat_plot <- data.frame(dat_tsne, vis_label)\n    names(dat_plot) <- c(\"dl.hl.1\", \"dl.hl.2\", \"vis_label\")\n    p <- ggplot(dat_plot) +\n      geom_point(aes(x = dl.hl.1, y = dl.hl.2, color = vis_label),\n                 alpha = 0.7) +\n      xlab(\"tSNE Dim 1\") +\n      ylab(\"tSNE Dim 2\") +\n      ggtitle(\"tSNE Dimentions of DL model Hidden Layer\") +\n      guides(color = guide_legend(title = label)) +\n      theme_classic(base_size =  12)\n    p\n  } else if(dimentions == 3) {\n    cat(\"Starting tSNE dimentionality reduction\")\n    dat_tsne <- tsne(X = dlayer,\n                     k = dimentions,\n                     initial_dims = dim(dlayer)[2],\n                     max_iter = tsne_iter)\n    vis_label <- as.data.frame(view_label)[,1]\n\n    dat_plot <- data.frame(dat_tsne, vis_label)\n    names(dat_plot) <- c(\"dl.hl.1\", \"dl.hl.2\", \"dl.hl.3\", \"vis_label\")\n    p <- plot_ly(dat_plot, x = ~dl.hl.1, y = ~dl.hl.2, z = ~dl.hl.3, color = ~vis_label) %>%\n      add_markers() %>%\n      layout(scene = list(xaxis = list(title = \"tSNE Dim 1\"),\n                          yaxis = list(title = \"tSNE Dim 2\"),\n                          zaxis = list(title = \"tSNE Dim 3\")))\n  cat(paste(\"3D plot is saved as html page:\\n\", wd, \"/\", \"dl-hidden-layer-plot.html\\n\",\n            \"open it there with your browser\", sep = \"\"))\n  saveWidget(as_widget(p), \"dl-hidden-layer-plot.html\")\n  } else {\n    stop(\"Dimentions must be set to 2 or 3\")\n  }\n}\n",
    "created" : 1495998469065.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "565504198",
    "id" : "6A5373C7",
    "lastKnownWriteTime" : 1496000621,
    "last_content_update" : 1496000621930,
    "path" : "C:/Users/Andy/Desktop/r-package/startml/R/plot-dlayer.R",
    "project_path" : "R/plot-dlayer.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}