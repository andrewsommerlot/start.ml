{
    "collab_server" : "",
    "contents" : "#' select_models\n#'\n#' select_models identifies best models in mlblob object by performance and pearson correlation thresholds.\n#' @param model_list List object of H2O model objects to be subbsetted by performance and correlation thresholds\n#' No Default.\n#' @param test H2O frame object containing labeled data for model evaluation.\n#' No Default.\n#' @param y Character object of length 1 identifying the column name of the target variable. No Default.\n#' @param eval_metric Character object one of logloss, MSE, RMSE, MAE, AUC, or mean_per_class_error.\n#' @param eval_threshold Numeric object defining the performance threshold models must meet to be used in prediction. Is minimum for maximization loss function (i.e., AUC) and maximum for minimization loss functions (logloss, MSE, etc). Default is NULL, returns models without performance consideration.\n#' @param correlation_threshold Numeric object defining the maximum person correlation allowed in the group of resulting models. If two models show high correlation, the one with surperior performance will be kept and the other dropped. Value ranges from -1 to 1, default is NULL, returning models without correlation considered.\n#' @return List object containing H2O model objects adhearing to threshold standards set in input arguments.\n#' @export\nselect_models <- function(model_list,\n                          test,\n                          eval_metric,\n                          y,\n                          eval_threshold = NULL,\n                          correlation_threshold = NULL) {\n  if(eval_metric == \"AUC\") {\n    eval_fun <- function(a, b) {\n      a >= b\n    }\n  } else {\n    eval_fun <- function(a, b) {\n      a <= b\n    }\n  }\n  if(is.null(correlation_threshold)) {\n    low_cor_models <- model_list\n  } else {\n  prediction_list <- predict_blob(test, model_list)\n    if(eval_metric == \"AUC\" | eval_metric == \"logloss\") {\n      predictions_subset <- lapply(prediction_list, function(x)x[,3])\n      predictions <- h2o.cbind(predictions_subset)\n    } else {\n    predictions <- h2o.cbind(prediction_list)\n    }\n  correlations <- h2o.cor(predictions)\n  names(correlations) <- seq(1:length(model_list))\n  correlations[!lower.tri(correlations)] <- 0\n  low_cor_models <- model_list[as.numeric(colnames(correlations[,!apply(correlations,2,\n    function(x) any(x > correlation_threshold))]))]\n  }\n  if(length(low_cor_models) == 0){\n    min_message <- min(correlations[correlations != 0])\n    warning(paste(\"No models selected, minimum correlation available is\",\n                  min_message, \"\\nReturning models unconstrained by correlation\\n\"))\n    low_cor_models <- model_list\n  } else {\n    if(is.null(eval_threshold)) {\n      low_cor_models\n    } else {\n      if(!exists(\"prediction_list\")) {\n        prediction_list <- predict_blob(test, model_list)\n      }\n      metrics <- unlist(test_metric(prediction_list, test = test, y = y, eval_metric = eval_metric))\n      keep_models <- low_cor_models[eval_fun(metrics, eval_threshold)]\n      if(length(keep_models) == 0){\n        warning(\"eval_threshold too optimistic, returning models unconstrained by performance\")\n        low_cor_models\n      } else {\n        keep_models\n      }\n    }\n  }\n}\n",
    "created" : 1496011037194.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1182953486",
    "id" : "EFB1B61A",
    "lastKnownWriteTime" : 1496012626,
    "last_content_update" : 1496012626885,
    "path" : "C:/Users/Andy/Desktop/r-package/startml/R/select-models.R",
    "project_path" : "R/select-models.R",
    "properties" : {
    },
    "relative_order" : 19,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}